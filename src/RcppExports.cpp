// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/XOMultinom.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// highest_order_statistics_C
double highest_order_statistics_C(const double& td, int n, int m, int J);
RcppExport SEXP _XOMultinom_highest_order_statistics_C(SEXP tdSEXP, SEXP nSEXP, SEXP mSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type td(tdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(highest_order_statistics_C(td, n, m, J));
    return rcpp_result_gen;
END_RCPP
}
// max_for_min_C
double max_for_min_C(const double& t_max, int n, int m, int t);
RcppExport SEXP _XOMultinom_max_for_min_C(SEXP t_maxSEXP, SEXP nSEXP, SEXP mSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(max_for_min_C(t_max, n, m, t));
    return rcpp_result_gen;
END_RCPP
}
// max_for_range_C
double max_for_range_C(const double& t_max, int n, int m, arma::vec prev, int t);
RcppExport SEXP _XOMultinom_max_for_range_C(SEXP t_maxSEXP, SEXP nSEXP, SEXP mSEXP, SEXP prevSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prev(prevSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(max_for_range_C(t_max, n, m, prev, t));
    return rcpp_result_gen;
END_RCPP
}
// max_order_statistic_C
double max_order_statistic_C(const double& td, int n, int m);
RcppExport SEXP _XOMultinom_max_order_statistic_C(SEXP tdSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type td(tdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(max_order_statistic_C(td, n, m));
    return rcpp_result_gen;
END_RCPP
}
// range_probability_C
double range_probability_C(const double& td, int n, int m);
RcppExport SEXP _XOMultinom_range_probability_C(SEXP tdSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type td(tdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(range_probability_C(td, n, m));
    return rcpp_result_gen;
END_RCPP
}
// recursive_sum_C
double recursive_sum_C(const double& td, int n, int m, int J, int sum_depth, int cur_depth, arma::vec rangeArg);
RcppExport SEXP _XOMultinom_recursive_sum_C(SEXP tdSEXP, SEXP nSEXP, SEXP mSEXP, SEXP JSEXP, SEXP sum_depthSEXP, SEXP cur_depthSEXP, SEXP rangeArgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type td(tdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type sum_depth(sum_depthSEXP);
    Rcpp::traits::input_parameter< int >::type cur_depth(cur_depthSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rangeArg(rangeArgSEXP);
    rcpp_result_gen = Rcpp::wrap(recursive_sum_C(td, n, m, J, sum_depth, cur_depth, rangeArg));
    return rcpp_result_gen;
END_RCPP
}
// smallest_order_value_C
double smallest_order_value_C(const double& td, int n, int m);
RcppExport SEXP _XOMultinom_smallest_order_value_C(SEXP tdSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type td(tdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(smallest_order_value_C(td, n, m));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_XOMultinom_highest_order_statistics_C", (DL_FUNC) &_XOMultinom_highest_order_statistics_C, 4},
    {"_XOMultinom_max_for_min_C", (DL_FUNC) &_XOMultinom_max_for_min_C, 4},
    {"_XOMultinom_max_for_range_C", (DL_FUNC) &_XOMultinom_max_for_range_C, 5},
    {"_XOMultinom_max_order_statistic_C", (DL_FUNC) &_XOMultinom_max_order_statistic_C, 3},
    {"_XOMultinom_range_probability_C", (DL_FUNC) &_XOMultinom_range_probability_C, 3},
    {"_XOMultinom_recursive_sum_C", (DL_FUNC) &_XOMultinom_recursive_sum_C, 7},
    {"_XOMultinom_smallest_order_value_C", (DL_FUNC) &_XOMultinom_smallest_order_value_C, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_XOMultinom(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
