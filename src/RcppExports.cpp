// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/XOMultinom.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// highest_order_statistics_C
double highest_order_statistics_C(const double& td, int n, int m, int J);
RcppExport SEXP _XOMultinom_highest_order_statistics_C(SEXP tdSEXP, SEXP nSEXP, SEXP mSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type td(tdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(highest_order_statistics_C(td, n, m, J));
    return rcpp_result_gen;
END_RCPP
}
// max_for_min_C
double max_for_min_C(const double& t_max, int n, int m, int t);
RcppExport SEXP _XOMultinom_max_for_min_C(SEXP t_maxSEXP, SEXP nSEXP, SEXP mSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(max_for_min_C(t_max, n, m, t));
    return rcpp_result_gen;
END_RCPP
}
// max_for_range_C
double max_for_range_C(const double& t_max, int n, int m, arma::vec prev, int t);
RcppExport SEXP _XOMultinom_max_for_range_C(SEXP t_maxSEXP, SEXP nSEXP, SEXP mSEXP, SEXP prevSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prev(prevSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(max_for_range_C(t_max, n, m, prev, t));
    return rcpp_result_gen;
END_RCPP
}
// max_order_statistic_C
double max_order_statistic_C(const double& td, int n, int m);
RcppExport SEXP _XOMultinom_max_order_statistic_C(SEXP tdSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type td(tdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(max_order_statistic_C(td, n, m));
    return rcpp_result_gen;
END_RCPP
}
// pmaxmultinom_C
Rcpp::NumericVector pmaxmultinom_C(const Rcpp::NumericVector& x, const int& size, const Rcpp::NumericVector& prob, const bool& logd, const bool& verbose);
RcppExport SEXP _XOMultinom_pmaxmultinom_C(SEXP xSEXP, SEXP sizeSEXP, SEXP probSEXP, SEXP logdSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(pmaxmultinom_C(x, size, prob, logd, verbose));
    return rcpp_result_gen;
END_RCPP
}
// pminmultinom_C
Rcpp::NumericVector pminmultinom_C(const Rcpp::NumericVector& x, const int& size, const Rcpp::NumericVector& prob, const bool& logd, const bool& verbose);
RcppExport SEXP _XOMultinom_pminmultinom_C(SEXP xSEXP, SEXP sizeSEXP, SEXP probSEXP, SEXP logdSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(pminmultinom_C(x, size, prob, logd, verbose));
    return rcpp_result_gen;
END_RCPP
}
// range_probability_C
double range_probability_C(const double& td, int n, int m);
RcppExport SEXP _XOMultinom_range_probability_C(SEXP tdSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type td(tdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(range_probability_C(td, n, m));
    return rcpp_result_gen;
END_RCPP
}
// recursive_sum_C
double recursive_sum_C(const double& td, int n, int m, int J, int sum_depth, int cur_depth, arma::vec rangeArg);
RcppExport SEXP _XOMultinom_recursive_sum_C(SEXP tdSEXP, SEXP nSEXP, SEXP mSEXP, SEXP JSEXP, SEXP sum_depthSEXP, SEXP cur_depthSEXP, SEXP rangeArgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type td(tdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type sum_depth(sum_depthSEXP);
    Rcpp::traits::input_parameter< int >::type cur_depth(cur_depthSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rangeArg(rangeArgSEXP);
    rcpp_result_gen = Rcpp::wrap(recursive_sum_C(td, n, m, J, sum_depth, cur_depth, rangeArg));
    return rcpp_result_gen;
END_RCPP
}
// smallest_order_value_C
double smallest_order_value_C(const double& td, int n, int m);
RcppExport SEXP _XOMultinom_smallest_order_value_C(SEXP tdSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type td(tdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(smallest_order_value_C(td, n, m));
    return rcpp_result_gen;
END_RCPP
}
// any_sug
bool any_sug(Rcpp::LogicalVector x);
RcppExport SEXP _XOMultinom_any_sug(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(any_sug(x));
    return rcpp_result_gen;
END_RCPP
}
// cumsum_rcpp
Rcpp::NumericVector cumsum_rcpp(Rcpp::NumericVector x);
RcppExport SEXP _XOMultinom_cumsum_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// matelmult_rcpp
Rcpp::NumericVector matelmult_rcpp(Rcpp::NumericVector v1, Rcpp::NumericVector v2);
RcppExport SEXP _XOMultinom_matelmult_rcpp(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(matelmult_rcpp(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// rev_rcpp
Rcpp::NumericVector rev_rcpp(Rcpp::NumericVector x);
RcppExport SEXP _XOMultinom_rev_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rev_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// aggregate_rcpp
Rcpp::DataFrame aggregate_rcpp(Rcpp::DataFrame x, Rcpp::List by);
RcppExport SEXP _XOMultinom_aggregate_rcpp(SEXP xSEXP, SEXP bySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type by(bySEXP);
    rcpp_result_gen = Rcpp::wrap(aggregate_rcpp(x, by));
    return rcpp_result_gen;
END_RCPP
}
// list_resize_rcpp
Rcpp::List list_resize_rcpp(const Rcpp::List& x, int newsize);
RcppExport SEXP _XOMultinom_list_resize_rcpp(SEXP xSEXP, SEXP newsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type newsize(newsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(list_resize_rcpp(x, newsize));
    return rcpp_result_gen;
END_RCPP
}
// nm2df_rcpp
Rcpp::DataFrame nm2df_rcpp(Rcpp::NumericMatrix x);
RcppExport SEXP _XOMultinom_nm2df_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(nm2df_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// df2nm_rcpp
Rcpp::NumericMatrix df2nm_rcpp(Rcpp::DataFrame x);
RcppExport SEXP _XOMultinom_df2nm_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(df2nm_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// flipcols_rcpp
Rcpp::NumericMatrix flipcols_rcpp(Rcpp::NumericMatrix x);
RcppExport SEXP _XOMultinom_flipcols_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(flipcols_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_XOMultinom_highest_order_statistics_C", (DL_FUNC) &_XOMultinom_highest_order_statistics_C, 4},
    {"_XOMultinom_max_for_min_C", (DL_FUNC) &_XOMultinom_max_for_min_C, 4},
    {"_XOMultinom_max_for_range_C", (DL_FUNC) &_XOMultinom_max_for_range_C, 5},
    {"_XOMultinom_max_order_statistic_C", (DL_FUNC) &_XOMultinom_max_order_statistic_C, 3},
    {"_XOMultinom_pmaxmultinom_C", (DL_FUNC) &_XOMultinom_pmaxmultinom_C, 5},
    {"_XOMultinom_pminmultinom_C", (DL_FUNC) &_XOMultinom_pminmultinom_C, 5},
    {"_XOMultinom_range_probability_C", (DL_FUNC) &_XOMultinom_range_probability_C, 3},
    {"_XOMultinom_recursive_sum_C", (DL_FUNC) &_XOMultinom_recursive_sum_C, 7},
    {"_XOMultinom_smallest_order_value_C", (DL_FUNC) &_XOMultinom_smallest_order_value_C, 3},
    {"_XOMultinom_any_sug", (DL_FUNC) &_XOMultinom_any_sug, 1},
    {"_XOMultinom_cumsum_rcpp", (DL_FUNC) &_XOMultinom_cumsum_rcpp, 1},
    {"_XOMultinom_matelmult_rcpp", (DL_FUNC) &_XOMultinom_matelmult_rcpp, 2},
    {"_XOMultinom_rev_rcpp", (DL_FUNC) &_XOMultinom_rev_rcpp, 1},
    {"_XOMultinom_aggregate_rcpp", (DL_FUNC) &_XOMultinom_aggregate_rcpp, 2},
    {"_XOMultinom_list_resize_rcpp", (DL_FUNC) &_XOMultinom_list_resize_rcpp, 2},
    {"_XOMultinom_nm2df_rcpp", (DL_FUNC) &_XOMultinom_nm2df_rcpp, 1},
    {"_XOMultinom_df2nm_rcpp", (DL_FUNC) &_XOMultinom_df2nm_rcpp, 1},
    {"_XOMultinom_flipcols_rcpp", (DL_FUNC) &_XOMultinom_flipcols_rcpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_XOMultinom(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
